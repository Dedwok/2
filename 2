# Базовый класс Animal
class Animal:
    def __init__(self, name):
        self.name = name
    
    def make_sound(self):
        print(f"{self.name} издает звук")

    def move(self):
        print(f"{self.name} передвигается")

# Производный класс Dog
class Dog(Animal):
    def make_sound(self):  # Переопределение метода
        print(f"{self.name} лает: Гав-гав!")
    
    def fetch(self):  # Уникальный метод
        print(f"{self.name} приносит палку")

# Производный класс Bird
class Bird(Animal):
    def make_sound(self):  # Переопределение метода
        print(f"{self.name} поет: Чик-чирик!")
    
    def fly(self):  # Уникальный метод
        print(f"{self.name} летает")

# Тестовая программа
def main():
    # Создаем объекты
    animal = Animal("Животное")
    dog = Dog("Барсик")
    bird = Bird("Чижик")

    # Демонстрация методов базового класса
    print("=== Базовый класс ===")
    animal.make_sound()
    animal.move()

    # Демонстрация переопределенных методов
    print("\n=== Производные классы ===")
    dog.make_sound()
    bird.make_sound()

    # Демонстрация уникальных методов
    print("\n=== Уникальные методы ===")
    dog.fetch()
    bird.fly()

    # Полиморфизм в действии
    print("\n=== Полиморфизм ===")
    for creature in [animal, dog, bird]:
        creature.make_sound()  # Один интерфейс - разное поведение

if __name__ == "__main__":
    main()
